# This is a manually created, minimal lock file due to environment limitations.
# It does NOT contain full dependency resolution and hashes.
# For a real build, this file should be generated by `poetry lock`.

[[package]]
name = "boto3"
version = "1.28.0" # From pyproject.toml
description = "The AWS SDK for Python"
category = "main"
optional = false
python-versions = ">=3.7" # Example, actual might be different

[[package]]
name = "fastapi"
version = "0.100.0" # From pyproject.toml
description = "FastAPI framework, high performance, easy to learn, fast to code, ready for production"
category = "main"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "pydantic"
version = "2.0.0" # From pyproject.toml
description = "Data validation and settings management using python type hints"
category = "main"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "pydantic-settings"
version = "2.0.0" # From pyproject.toml
description = "Pydantic settings management"
category = "main"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "python-dotenv"
version = "1.0.0" # From pyproject.toml
description = "Read key-value pairs from .env files and set them as environment variables"
category = "main"
optional = false
python-versions = ">=3.6" # Example

[[package]]
name = "structlog"
version = "23.0.0" # From pyproject.toml
description = "Structured Logging for Python"
category = "main"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "uvicorn"
version = "0.23.0" # From pyproject.toml
description = "The lightning-fast ASGI server."
category = "main"
optional = false
python-versions = ">=3.7" # Example
extras = ["standard"]

# [[package.extras]] # This was causing TOML parsing issues, extras are usually listed under [tool.poetry.dependencies.uvicorn.extras] or resolved differently.
# standard = ["httptools", "uvloop", "websockets", "watchfiles"]
# For simplicity in manual lock, I'll list uvicorn without explicitly detailing its extras' own dependencies here.
# A real lock file would be more detailed.

[[package]]
name = "pytest"
version = "7.0.0" # From pyproject.toml
description = "pytest: simple powerful testing with Python"
category = "dev"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "pytest-asyncio"
version = "0.21.0" # From pyproject.toml
description = "Pytest support for asyncio."
category = "dev"
optional = false
python-versions = ">=3.7" # Example

[[package]]
name = "pytest-mock"
version = "3.10.0" # From pyproject.toml
description = "Thin-wrapper around the mock package for easier use with pytest"
category = "dev"
optional = false
python-versions = ">=3.6" # Example


[metadata]
lock-version = "2.0" # Poetry lock file version
python-versions = "^3.9" # From pyproject.toml
content-hash = "minimal-placeholder-hash-due-to-env-constraints-v2" # Placeholder

# [metadata.files] # This section would normally list all files with their hashes.
# For a truly minimal lock file that still parses, we can omit the files section or make it very simple.
# A real `poetry lock` would populate this extensively.
# For this workaround, to ensure it's valid TOML and minimally representative:
files = { } # Empty map for files, as we are not hashing them.
